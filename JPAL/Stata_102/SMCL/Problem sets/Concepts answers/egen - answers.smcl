{smcl}
{txt}{...}
{pstd}{c TLC}{hline 43}{c TRC}{break}
{bf}{...}
{c |}{view `""Stata 102.smcl""': Innovations for Poverty Action{space 12}}{c |}{break}
{c |}{view `""Stata 102.smcl""': The Abdul Latif Jameel Poverty Action Lab{space 1}}{c |}{break}
{c |}{view `""Stata 102.smcl""':{space 43}}{c |}{break}
{c |}{view `""Stata 102.smcl""': Staff Training{space 28}}{c |}{break}
{c |}{view `""Stata 102.smcl""': Stata 102{space 33}}{c |}{break}
{sf}{...}
{c BLC}{hline 43}{c BRC}

{pstd}{EGEN!}
{it:Problem set answers}{break}

{pstd}{EGEN_ANSQ1}
{EGEN_ANSQ2}
{EGEN_ANSQ3}


{hline}{marker q1}

{pstd}{bf:Answer to Question 1}

{hline}

{pstd}{it}{...} What is the difference between {cmd:generate} and {cmd:egen}?
{txt}{sf}{ul off}{...}

{pstd}{cmd:generate} creates a new variable observation by observation.
Generally speaking, the value of the new variable in observation {cmd:1} depends only on
other values in observation {cmd:1};
the value in observation {cmd:2} depends only on
other values in observation {cmd:2};
and so on.
(The chief exception to this is {LITTLEN...}.)

{pstd}On the other hand, {cmd:egen} usually calculates its values across all observations
in the dataset (or all observations within the by-group, if {cmd:by} is used).
For a new variable, all observations' values depend on other observations,
not just their own observations.

{hline}{marker q2}

{pstd}{bf:Answer to Question 2}

{hline}

{pstd}{bf:{stata `"use "Raw/Stata 102", clear"'}}{p_end}
{pstd}{txt}{sf}{ul off}{...}

{pstd}{it}{...} {bf:(a)}

{pstd}Create a dummy variable named {cmd:over40}
that equals {cmd:1} if a respondent is over {cmd:40} years old
and {cmd:0} otherwise.
{txt}{sf}{ul off}{...}

{pstd}{bf:{stata `"generate over40 = age > 40 if !missing(age)"'}}{p_end}

{pstd}{it}{...} {bf:(b)}

{pstd}Using {cmd:over40}, {cmd:by}, and {cmd:egen},
calculate the average number of years of education for
those 40 and younger and for those older.

{pstd}Verify your results using {cmd:summarize}.
{txt}{sf}{ul off}{...}

{pstd}{bf:{stata `"bysort over40: egen meaneduc = mean(educ)"'}}{p_end}
{pstd}{bf:{stata `"tabulate meaneduc over40"'}}{p_end}

{pstd}Verifying with {cmd:summarize}:

{pstd}{bf:{stata `"by over40: summarize educ"'}}{p_end}

{hline}{marker q3}

{pstd}{bf:Answer to Question 3}

{hline}

{pstd}{bf:{stata `"use "Raw/Stata 102", clear"'}}{p_end}
{pstd}{txt}{sf}{ul off}{...}

{pstd}{it}{...} {bf:(a)}

{pstd}Using {cmd:egen}, create a variable named {cmd:nmiss} (for "number missing")
that indicates for a given observation
the total number of missing values across all variables.

{pstd}Use {helpb egen:help egen} to find
the right {cmd:egen} function to use for this task.
{txt}{sf}{ul off}{...}

{pstd}{bf:{stata `"egen nmiss = rowmiss(_all)"'}}{p_end}

{pstd}{it}{...} {bf:(b)}

{pstd}Using a different {helpb egen} function than you did in {bf:(a)},
create a new variable named {cmd:nonmiss}
that equals the total number of {it:non}missing values for each observation.
{txt}{sf}{ul off}{...}

{pstd}{bf:{stata `"egen nonmiss = rownonmiss(_all), strok"'}}{p_end}

{pstd}{it}{...} {bf:(c)}

{pstd}In each observation,
the sum of {cmd:nmiss} and {cmd:nonmiss} should equal a constant number.
Verify that this is the case.
{txt}{sf}{ul off}{...}

{pstd}{bf:{stata `"generate sum = nmiss + nonmiss"'}}{p_end}
{pstd}{bf:{stata `"tabulate sum"'}}{p_end}

{pstd}{it}{...} {bf:(d)}

{pstd}How do the {cmd:egen} functions used above differ
from most other {cmd:egen} functions?
{txt}{sf}{ul off}{...}

{pstd}Both {cmd:rowmiss()} and {cmd:rownonmiss()},
as well as other {cmd:egen row*()} functions,
calculate their values observation by observation,
as {cmd:generate} does.
Many {cmd:egen} functions calculate their values
across all observations in the dataset,
yet some {cmd:egen} functions, such as these, are
essentially the same as normal functions used
with {cmd:generate} and within expressions.


{hline}

{pstd}{EGEN_PS2}
Return to Module: {EGEN}

{pstd}{view `""Stata 102.smcl""':Stata 102 Start}{break}
