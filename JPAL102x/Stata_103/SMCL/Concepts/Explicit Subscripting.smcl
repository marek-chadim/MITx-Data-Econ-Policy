{smcl}
{txt}{...}
{pstd}{c TLC}{hline 43}{c TRC}{break}
{bf}{...}
{c |}{view `""Stata 103.smcl""': Innovations for Poverty Action{space 12}}{c |}{break}
{c |}{view `""Stata 103.smcl""': The Abdul Latif Jameel Poverty Action Lab{space 1}}{c |}{break}
{c |}{view `""Stata 103.smcl""':{space 43}}{c |}{break}
{c |}{view `""Stata 103.smcl""': Staff Training{space 28}}{c |}{break}
{c |}{view `""Stata 103.smcl""': Stata 103{space 33}}{c |}{break}
{sf}{...}
{c BLC}{hline 43}{c BRC}

{pstd}{bf:Explicit Subscripting}{break}

{pstd}{bf:{stata `"use "Raw/Stata 103", clear"'}}{p_end}

{marker loop}{...}
{pstd}It looks like the two observations for {cmd:hhid "1802011"} are very similar:

{pstd}{bf:{stata `"list hhid sex age educ occupation if hhid == "1802011""'}}{p_end}

{pstd}However, they aren't identical across all variables.
We can use the following loop to find out how different they are:

{pstd}{cmd}foreach var of varlist _all {{txt}{p_end}
{pmore}{cmd}display "`var'"{txt}{p_end}
{pmore}{cmd}display `var'[597]{txt}{p_end}
{pmore}{cmd}display `var'[598]{txt}{p_end}
{pmore}{cmd}display{txt}{p_end}
{pstd}{cmd}}{txt}{p_end}

{pstd}{stata `"run "Do/Concepts/Explicit Subscripting.do" 1"':Click here to execute.}

{pstd}Generally, for any variable {it:varname} and observation number {it:obs_num},
{it:varname}{cmd:[}{it:obs_num}{cmd:]} is the value of {it:varname}
in observation number {it:obs_num}. For example:

{p2colset 5 84 0 0}{...}
{pstd}{c TLC}{hline 78}{c TRC}{p_end}
{p2col:{c |} {it:It's the first time!} {bf:Try it yourself.}}{c |}{p_end}
{pstd}{c BLC}{hline 78}{c BRC}{p_end}
{p2colreset}{...}
{pstd}{...}{cmd}
display hhid[1]{break}
display surveyorid[10]
{txt}{sf}{ul off}{...}

{pstd}This is called {help subscripting:"explicit subscripting,"} and it depends on the sort order.
For example, the dataset is currently sorted by {cmd:hhid}:

{pstd}{bf:{stata `"describe, short"'}}{p_end}

{pstd}If we sort it by another variable list, there's no guarantee the observation numbers will continue
to refer to the same observations:

{pstd}{bf:{stata `"sort surveydate1 surveytime1"'}}{p_end}
{pstd}{bf:{stata `"display hhid[1]"'}}{p_end}
{pstd}{bf:{stata `"display surveyorid[10]"'}}{p_end}

{pstd}{bf:{stata `"sort hhid"'}}{p_end}

{pstd}Let's return to the loop above.
It loops through all variables.
For each variable, it first displays the name of the variable ({cmd:"`var'"}),
then the value of the variable in observation {cmd:597} ({cmd:`var'[597]}),
then the value of the variable in observation {cmd:598} ({cmd:`var'[598]}).
The final {cmd:display} just inserts a blank line.

{pstd}So, if John Doe and Jane Smith belonged to observations {cmd:597} and {cmd:598}, respectively,
the loop would display the name of each variable
followed by the values corresponding to John Doe (observation {cmd:597}) and Jane Smith (observation {cmd:598}).

{p2colset 5 84 0 0}{...}
{pstd}{c TLC}{hline 78}{c TRC}{p_end}
{p2col:{c |} {it:Technical Tip!}}{c |}{p_end}
{pstd}{c LT}{hline 78}{c RT}{p_end}
{p2col:{c |} Above, you see {cmd:display} typed out fully, and you might wonder why the shorter}{c |}{p_end}
{p2col:{c |} {cmd:disp} wasn't used. Or you might wonder why it's not {cmd:di} or {cmd:dis}. And that's the}{c |}{p_end}
{p2col:{c |} reason: users have different command abbreviation preferences. In this}{c |}{p_end}
{p2col:{c |} training, you'll see full command names, but you're also encouraged to use}{c |}{p_end}
{p2col:{c |} command abbreviations in your own work {hline 2} whichever ones you prefer.}{c |}{p_end}
{pstd}{c BLC}{hline 78}{c BRC}{p_end}
{p2colreset}{...}


{hline}

{pstd}Problem Set: {view `""SMCL/Problem sets/Concepts/Explicit Subscripting - problem set.smcl""':Explicit Subscripting}{break}

{pstd}Next: {view `""SMCL/Concepts/For-Loops and Macros.smcl""':For-Loops and Macros}{break}
Previous: {view `""SMCL/Concepts/Logical Expressions and Dummy Variables.smcl""':Logical Expressions and Dummy Variables}{break}
{view `""Stata 103.smcl""':Stata 103 Start}{break}
