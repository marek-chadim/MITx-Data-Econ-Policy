{smcl}
{txt}{...}
{pstd}{c TLC}{hline 43}{c TRC}{break}
{bf}{...}
{c |}{view `""Stata 103.smcl""': Innovations for Poverty Action{space 12}}{c |}{break}
{c |}{view `""Stata 103.smcl""': The Abdul Latif Jameel Poverty Action Lab{space 1}}{c |}{break}
{c |}{view `""Stata 103.smcl""':{space 43}}{c |}{break}
{c |}{view `""Stata 103.smcl""': Staff Training{space 28}}{c |}{break}
{c |}{view `""Stata 103.smcl""': Stata 103{space 33}}{c |}{break}
{sf}{...}
{c BLC}{hline 43}{c BRC}

{pstd}{bf:Logical Expressions and Dummy Variables}{break}

{pstd}{bf:{stata `"use "Raw/Stata 103", clear"'}}{p_end}

{pstd}Suppose you want to create a dummy variable named {cmd:female} that is {cmd:1} if the
respondent is female ({cmd:sex == 2}) and {cmd:0} otherwise. One way to do this is:

{pstd}{bf:{stata `"generate female = 0"'}}{p_end}
{pstd}{bf:{stata `"replace  female = 1 if sex == 2"':replace{space 2}female = 1 if sex == 2}}{p_end}

{pstd}{bf:{stata `"tabulate sex female"'}}{p_end}

{pstd}{bf:{stata `"drop female"'}}{p_end}

{pstd}However, there's a way to combine these two lines:

{...}
{p2colset 5 84 0 0}{...}
{pstd}{c TLC}{hline 78}{c TRC}{p_end}
{p2col:{c |} {it:It's the first time!} {bf:Try it yourself.}}{c |}{p_end}
{pstd}{c BLC}{hline 78}{c BRC}{p_end}
{p2colreset}{...}
{pstd}{...}{cmd}
generate female = sex == 2
{txt}{sf}{ul off}{...}

{pstd}{bf:{stata `"tabulate sex female"'}}{p_end}

{pstd}{bf:{stata `"drop female"'}}{p_end}

{pstd}The expression after the {cmd:=} operator, {cmd:sex == 2},
is a {it:logical expression}.
A logical expression equals {cmd:1} if it is true and {cmd:0} if it is false.
Thus, above, {cmd:female = 1} if {cmd:sex == 2} is true,
and {cmd:female = 0} if {cmd:sex == 2} is false.

{pstd}Here are examples of other logical expressions:

{p2colset 5 84 0 0}{...}
{pstd}{c TLC}{hline 78}{c TRC}{p_end}
{p2col:{c |} {it:It's the first time!} {bf:Try it yourself.}}{c |}{p_end}
{pstd}{c BLC}{hline 78}{c BRC}{p_end}
{p2colreset}{...}
{pstd}{...}{cmd}
local x = 1 + 1 == 2{break}
display `x'{break}
local x = 1 + 2 == 4{break}
display `x'{break}
local x = (1 + 1 == 2) + (1 + 2 == 4){break}
display `x'
{txt}{sf}{ul off}{...}

{pstd}Let's analyze the last definition of {cmd:`x'}.
Logical expressions evaluate to {cmd:1} or {cmd:0}.
{cmd:(1 + 1 == 2) + (1 + 2 == 4)} contains two logical expressions,
{cmd:1 + 1 == 2} and {cmd:1 + 2 == 4},
each of which evaluates to {cmd:1} or {cmd:0}.
The results from the two logical expressions are then summed.
Thus, {cmd:(1 + 1 == 2) + (1 + 2 == 4)} could take on three values:
{cmd:0}, if both expressions are false;
{cmd:1}, if one expression is true and the other is false;
and {cmd:2}, if both expressions are true.
Here, {cmd:1 + 1 == 2} is true ({cmd:1}), but {cmd:1 + 2 == 4} is false ({cmd:0}), so
{cmd:(1 + 1 == 2) + (1 + 2 == 4)} equals {cmd:1}.

{p2colset 5 84 0 0}{...}
{pstd}{c TLC}{hline 78}{c TRC}{p_end}
{p2col:{c |} {it:Technical Tip!}}{c |}{p_end}
{pstd}{c LT}{hline 78}{c RT}{p_end}
{p2col:{c |} We used a logical expression to create {cmd:female}:}{c |}{p_end}
{p2col:{c |} }{c |}{p_end}
{p2col:{c |} {bf:{stata generate female = sex == 2}}}{c |}{p_end}
{p2col:{c |} }{c |}{p_end}
{p2col:{c |} {bf:{stata drop female}}}{c |}{p_end}
{p2col:{c |} }{c |}{p_end}
{p2col:{c |} If you know {helpb cond()}, this is equivalent to:}{c |}{p_end}
{p2col:{c |} }{c |}{p_end}
{p2col:{c |} {bf:{stata generate female = cond(sex == 2, 1, 0)}}}{c |}{p_end}
{p2col:{c |} }{c |}{p_end}
{p2col:{c |} You can see the logical expression contained within {cmd:cond()}:}{c |}{p_end}
{p2col:{c |} }{c |}{p_end}
{p2col:{c |} {cmd:generate female = cond({ul:sex == 2}, 1, 0)}}{c |}{p_end}
{pstd}{c BLC}{hline 78}{c BRC}{p_end}
{p2colreset}{...}

{pstd}Another place where logical expressions are common is after
the {view `""SMCL/Concepts/if.smcl""':if qualifier}.
The expression that follows {cmd:if} in a command
is a logical expression.

{pstd}Note that you can use
{help fvvarlist:factor variables} to act as dummies in a regression without having to
create a single dummy variable. As some commands don't allow factor varibles, the {helpb xi}
prefix can also be used. It creates dummies for use outside a single command, and can be more
convenient than the equivalent for factor variables, {helpb fvrevar}. Unlike factor
variables, {cmd:xi} works with string variables in addition to numeric.


{hline}

{pstd}Next: {view `""SMCL/Concepts/Explicit Subscripting.smcl""':Explicit Subscripting}{break}
Previous: {view `""SMCL/Introduction/Training Introduction.smcl""':Training Introduction}{break}
{view `""Stata 103.smcl""':Stata 103 Start}{break}
