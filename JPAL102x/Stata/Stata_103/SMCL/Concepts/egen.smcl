{smcl}
{txt}{...}
{pstd}{c TLC}{hline 43}{c TRC}{break}
{bf}{...}
{c |}{view `""Stata 103.smcl""': Innovations for Poverty Action{space 12}}{c |}{break}
{c |}{view `""Stata 103.smcl""': The Abdul Latif Jameel Poverty Action Lab{space 1}}{c |}{break}
{c |}{view `""Stata 103.smcl""':{space 43}}{c |}{break}
{c |}{view `""Stata 103.smcl""': Staff Training{space 28}}{c |}{break}
{c |}{view `""Stata 103.smcl""': Stata 103{space 33}}{c |}{break}
{sf}{...}
{c BLC}{hline 43}{c BRC}

{pstd}{bf:{bf:egen}}{break}

{pstd}{bf:{stata `"use "Raw/Stata 103", clear"'}}{p_end}

{pstd}It can take a moment to figure out how to use {view `""SMCL/Concepts/by.smcl""':{bf:by}}, {view `""SMCL/Concepts/Big N.smcl""':{bf:_N}}, and {view `""SMCL/Concepts/Little n.smcl""':{bf:_n}}
to create variables whose values depend on multiple observations.

{pstd}However, in many cases there's a shortcut available.
{helpb egen} ("{ul:e}xtensions to {cmd:{ul:gen}erate}") creates variables
whose values are calculated from multiple observations in the dataset.
For example, to create a variable that is the maximum value of {cmd:age},
you could code using {cmd:_N}:

{pstd}{bf:{stata `"sort age"'}}{p_end}
{pstd}{bf:{stata `"generate maxage = age[_N]"'}}{p_end}

{pstd}{bf:{stata `"drop maxage"'}}{p_end}

{pstd}The alternative with {cmd:egen} is:

{p2colset 5 84 0 0}{...}
{pstd}{c TLC}{hline 78}{c TRC}{p_end}
{p2col:{c |} {it:It's the first time!} {bf:Try it yourself.}}{c |}{p_end}
{pstd}{c BLC}{hline 78}{c BRC}{p_end}
{p2colreset}{...}
{pstd}{...}{cmd}
egen maxage = max(age)
{txt}{sf}{ul off}{...}

{pstd}{bf:{stata `"drop maxage"'}}{p_end}

{pstd}With {cmd:generate},
unless {cmd:_n} or one of a small number of functions
(for example, {cmd:sum()}) is used,
the calculation of a new variable's values occurs within the observation.
That is, an observation's value of the new variable depends
only on other values {it:within} the observation.

{pstd}Not so with {cmd:egen}.
One of {cmd:egen}'s jobs is to make calculations {it:across} observations.
Above, {cmd:egen max(age)} involves a calculation
across all the observations of {cmd:age}.
An observation's value of {cmd:maxage} depends not just
on other values within the observation,
but also on other observations
(specifically, the value of {cmd:age} in other observations).

{pstd}{cmd:egen} is especially useful for by-groups,
for example, calculating the minimum value of {cmd:age by sex}.
Without {cmd:egen}:

{pstd}{bf:{stata `"bysort sex (age): generate minage = age[1]"'}}{p_end}

{pstd}{bf:{stata `"drop minage"'}}{p_end}

{pstd}This line of code requires some thought.
You have to use {cmd:(age)} so the data is sorted correctly,
and also use {cmd:age[1]} knowing that {cmd:generate} is a {view `""SMCL/Concepts/by.smcl"##group3"':group 3} command.
Alternatively:

{p2colset 5 84 0 0}{...}
{pstd}{c TLC}{hline 78}{c TRC}{p_end}
{p2col:{c |} {it:It's the first time!} {bf:Try it yourself.}}{c |}{p_end}
{pstd}{c BLC}{hline 78}{c BRC}{p_end}
{p2colreset}{...}
{pstd}{...}{cmd}
bysort sex: egen minage = min(age)
{txt}{sf}{ul off}{...}

{pstd}{bf:{stata `"drop minage"'}}{p_end}

{pstd}Above, {cmd:min()} and {cmd:max()} are {cmd:egen} functions.
This means that you can't use them outside {cmd:egen}.
Remember, one of {cmd:egen}'s chief roles is to create variables
that depend on multiple observations.
Using these functions with {cmd:generate} will result in an error.
For example:

{pstd}{bf:{stata `"bysort sex: generate minage = min(age)"'}}{p_end}

{pstd}In Stata, {cmd:min()} comes in two forms.
In one, it is a normal Stata function that requires multiple arguments;
it can be used with {cmd:generate}.
In the other, it is an {cmd:egen} function requiring just one argument.
We tried to use it as an {cmd:egen} function outside of {cmd:egen},
so we got an error.

{pstd}Let's see another example, with a different {cmd:egen} function.
Say we want to calculate the number of literate people whom
each surveyor interviewed.

{pstd}{bf:{stata `"bysort surveyorid: egen literate = total(literateyn)"'}}{p_end}

{pstd}Here we use the {cmd:total} function, which outputs the sum of a given variable,
here {bf:literateyn}, which takes the value 1 if the person is literate and 0 otherwise.
Using {cmd:bysort} calculates different sums for each value of {bf:surveyorid}. Let's browse
the relevant variables:

{pstd}{bf:{stata `"browse surveyorid literateyn literate"'}}{p_end}

{pstd}Values of {bf:literate} reflect the total number of literate people per {bf:surveyorid}.
Note the difficulty in calculating the average of {bf:literate} per {bf:surveyorid}. If
we simply execute {cmd:summarize literate}, our answer will be biased by the number of
observations per {bf:surveyorid}. How might we resolve this issue?

{pstd}There are many more {cmd:egen} functions,
and I encourage you to review the {help egen:{bf:egen} help file} when you start cleaning your data,
and periodically throughout the process.
You'll likely discover new ways to resolve coding problems you encounter.

{pstd}Also note that not all {cmd:egen} functions allow the {view `""SMCL/Concepts/by.smcl""':{bf:by}} prefix. See the {bf:help file}
for which functions can be combined with {cmd:by}.

{pstd}User-written {cmd:egen} functions are also available on {help SSC}:

{pstd}{bf:{stata `"ssc install egenmore"'}}{p_end}


{hline}

{pstd}Problem Set: {view `""SMCL/Problem sets/Concepts/egen - problem set.smcl""':{bf:egen}}{break}

{pstd}Previous: {view `""SMCL/Concepts/by.smcl""':{bf:by}}{break}
{view `""Stata 103.smcl""':Stata 103 Start}{break}
