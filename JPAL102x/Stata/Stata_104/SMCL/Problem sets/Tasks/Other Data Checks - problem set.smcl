{smcl}
{txt}{...}
{pstd}{c TLC}{hline 43}{c TRC}{break}
{bf}{...}
{c |}{view `""Stata 104.smcl""': Innovations for Poverty Action{space 12}}{c |}{break}
{c |}{view `""Stata 104.smcl""': The Abdul Latif Jameel Poverty Action Lab{space 1}}{c |}{break}
{c |}{view `""Stata 104.smcl""':{space 43}}{c |}{break}
{c |}{view `""Stata 104.smcl""': Staff Training{space 28}}{c |}{break}
{c |}{view `""Stata 104.smcl""': Stata 104{space 33}}{c |}{break}
{sf}{...}
{c BLC}{hline 43}{c BRC}

{pstd}{bf:Other Data Checks}{break}
{it:Problem set}{break}

{pstd}{view `""SMCL/Problem sets/Tasks/Other Data Checks - problem set.smcl"##q1"':Question 1}{break}
{view `""SMCL/Problem sets/Tasks/Other Data Checks - problem set.smcl"##q2"':Question 2}{break}
{view `""SMCL/Problem sets/Tasks/Other Data Checks - problem set.smcl"##q3"':Question 3}{break}
{view `""SMCL/Problem sets/Tasks/Other Data Checks - problem set.smcl"##q4"':Question 4}{break}


{hline}{marker q1}

{pstd}{bf:Problem Set Question 1}

{hline}

{pstd}{bf:{stata `"use "Raw/Stata 104", clear"'}}{p_end}

{pstd}We've seen two ways to check that {cmd:cycleownyn} is only {cmd:Yes} or {cmd:No}.
The first involved {bf:{view `""SMCL/Tasks/Other Data Checks.smcl"##levelsof"':levelsof}}:

{pstd}{bf:{stata `"levelsof cycleownyn"'}}{p_end}
{pstd}{bf:{stata `"assert "`r(levels)'" == "1 2""'}}{p_end}

{pstd}The second was {bf:{view `""SMCL/Tasks/Other Data Checks.smcl"##inrange"':inrange()}}:

{pstd}{bf:{stata `"assert inrange(cycleownyn, 1, 2)"'}}{p_end}

{pstd}Could it ever occur that the first {cmd:assert} (with {cmd:levelsof})
would fail but the second with {cmd:inrange()} would not?
How about vice versa?
If so, under what circumstances would this occur?
{txt}{sf}{ul off}{...}

{hline}{marker q2}

{pstd}{bf:Problem Set Question 2}

{hline}

{pstd}{bf:{stata `"use "Raw/Stata 104", clear"'}}{p_end}
{pstd}{txt}{sf}{ul off}{...}

{pstd}{bf:(a)}

{pstd}Using {cmd:levelsof}, loop through all distinct values of {cmd:castename}.
For how many values is the {help substr():first character} {cmd:"B"}?
{txt}{sf}{ul off}{...}

{pstd}{bf:(b)}

{pstd}For each distinct value of {cmd:castename},
display the number of corresponding values of {cmd:castecode}.
For example, {cmd:castename "VISHWAKARMA"} has
exactly one corresponding value of {cmd:castecode}: {cmd:OBC}.

{pstd}Are there any values of {cmd:castename}
with more than one corresponding value of {cmd:castecode}?
{txt}{sf}{ul off}{...}

{hline}{marker q3}

{pstd}{bf:Problem Set Question 3}

{hline}

{pstd}{bf:{stata `"use "Raw/Stata 104", clear"'}}{p_end}

{pstd}Using a loop (not manually using {cmd:codebook}),
find all variables with all missing values.

{pstd}If there are any, are they all necessarily problematic?
{txt}{sf}{ul off}{...}

{hline}{marker q4}

{pstd}{bf:Problem Set Question 4}

{hline}

{pstd}Have you encountered unexpected, problematic, or weird data originating
from a project's survey design, computer-assisted interviewing (CAI) programming,
or field work?
Describe the process through which you identified
the source of the issue and how you resolved it.
{txt}{sf}{ul off}{...}


{hline}

{pstd}{view `""SMCL/Problem sets/Tasks answers/Other Data Checks - answers.smcl""':Answers}{break}
Return to Module: {view `""SMCL/Tasks/Other Data Checks.smcl""':Other Data Checks}{break}

{pstd}{view `""Stata 104.smcl""':Stata 104 Start}{break}
